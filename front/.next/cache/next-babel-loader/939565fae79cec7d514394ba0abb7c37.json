{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/dujak/project/node-bird-study/front/sagas/post.js"],"names":["axios","all","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","console","error","response","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostsAPI","lastId","get","loadPosts","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { all, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\n\nimport {\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    LIKE_POST_FAILURE,\n    LIKE_POST_REQUEST,\n    LIKE_POST_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n    RETWEET_FAILURE,\n    RETWEET_REQUEST,\n    RETWEET_SUCCESS,\n    UNLIKE_POST_FAILURE,\n    UNLIKE_POST_REQUEST,\n    UNLIKE_POST_SUCCESS,\n    UPLOAD_IMAGES_FAILURE,\n    UPLOAD_IMAGES_REQUEST,\n    UPLOAD_IMAGES_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction retweetAPI(data) {\n    return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n    try {\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: RETWEET_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction uploadImagesAPI(data) {\n    return axios.post(\"/post/images\", data);\n}\n\nfunction* uploadImages(action) {\n    try {\n        const result = yield call(uploadImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction likePostAPI(data) {\n    return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n    try {\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction unlikePostAPI(data) {\n    return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction loadPostsAPI(lastId) {\n    return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI, action.lastId);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction addPostAPI(data) {\n    return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction removePostAPI(data) {\n    return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI, action.data);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchRetweet() {\n    yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchRetweet),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}